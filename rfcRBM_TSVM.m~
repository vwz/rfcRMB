function [regressV, regressE] = rfcRBM_TSVM(batchlabel, vishid, visbiases, hidbiases, batchposhidprobs, batchposhidprobs_aux, maxepoch)

% This program trains TSVM of the following form:
%	min L2
%	s.t. R2, R3, R4, R5
% where
% 	L2 = sum_m { 1/2*|v_m|^2 + C_m*sum_k xi_mk + C'_m*sum_k xi'_mk },
%	R2 = forall (m, k), delta(y^k=m)*[v_m*g(x^k) + e_m] >= 1 - xi_mk
%	R3 = forall (m, k), z'_mk*[v_m*g(x^k) + e_m] >= 1 - xi'_mk
%	R4 = forall (m, k), xi_mk >= 0
%	R5 = forall (m, k), xi'_mk >= 0
%
% The program assumes that the following variables are set externally:
% maxepoch   -- maximum number of epochs
% numhid     -- number of hidden units% batchlabel -- the labels that are divided into batches (numcases numbatches), and each label is a location class index; NEED this to cover all locations
% batchposhidprobs -- the RBM output (probability that each hid as 1) for labeled data (numcases numhid numbatches)
% batchposhidprobs_aux -- the RBM output (probability that each hid as 1) for unlabeled data (numcases_aux numhid numbatches_aux)

%% pool all the data together
[numcases numhid numbatches]=size(batchposhidprobs);
poshidprobs = [];
for batch = 1:numbatches
    poshidprobs = [poshidprobs; batchposhidprobs(:, :, batch)];
end

[numcases_aux numhid numbatches_aux]=size(batchposhidprobs_aux);
poshidprobs_aux = [];
for batch = 1:numbatches_aux
    poshidprobs_aux = [poshidprobs_aux; batchposhidprobs_aux(:, :, batch)];
end

[numcases numbatches]=size(batchlabel);
label = [];
for batch = 1:numbatches
    label = [label; batchlabel(:, batch)];
end

%% train K-class tsvm by K binary classifiers
K = length(unique(label));
for i=1:K
    train = [poshidprobs; poshidprobs_aux];

    %%% set i-th class as +1, and the other classes as -1
    ilabel = (label == i);
    index = find(ilabel == 0);
    ilabel(index) = -1;
    trainlabel = [ilabel; zeros(numcases_aux, 1)];

    %%% handle class imbalance, by setting j-value as #(negative)/#(positive)
    jvalue = length(index) / (length(ilabel) - length(index));

    %%% train i-th binary classifier
    modelname = strcat('tsvm_models/model_', num2str(i));
    net = svml(modelname, 'Kernel', 0, 'C', 1, 'CostFactor', j_value);
    net = svmltrain(net, train, train_label);
end

