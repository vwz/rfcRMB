function [batchcor12, batchcor21, batchsim11, batchsim22] = GetFullSemi(batchdata, batchdata_aux, K)
% This program first calculates the Pearson correlation between an unlabeled instance from batchdata_aux and an labeled instance from batchdata,
% then it finds the top K labled neighbors for each unlabeled instance.
%
% The program assumes that the following variables are set externally:
% batchdata  -- the labeled data that is divided into batches (numcases numdims numbatches)
% batchdata_aux   -- the auxiliary unlabeled data that is divided into batches (numcases numdims numbatches)
% K -- the top K neighbors in the correlation graph

[numcases numdims numbatches]=size(batchdata);
[numcases_aux numdims_aux numbatches_aux]=size(batchdata_aux);
batchcor12 = zeros(numcases, K*3, numbatches);
batchcor21 = zeros(numcases_aux, K*3, numbatches_aux);
batchsim11 = zeros(numcases, K*3, numbatches);
batchsim22 = zeros(numcases_aux, K*3, numbatches_aux);

stackdata = [];
for batch=1:numbatches
    stackdata = [stackdata; batchdata(:,:,batch)];
end

stackdata_aux = [];
for batch=1:numbatches_aux
    stackdata_aux = [stackdata_aux; batchdata_aux(:,:,batch)];
end

% for batchcor12
for batch=1:numbatches
    data = batchdata(:,:,batch);
    for i=1:numcases
	rho = corr(data(i,:)', stackdata_aux', 'type', 'Pearson');
	[sortvals, sortind] = sort(rho, 'descend');
	corvec = [];
	for j=1:K
	    [batchId, insId] = GetIds(numcases, numbatches_aux, sortind(j));
	    tmp = [batchId, insId, sortvals(j)];
	    corvec = [corvec, tmp];
	end
	batchcor12(i,:,batch) = corvec;
    end
end

% for batchcor21
for batch=1:numbatches_aux
    data = batchdata_aux(:,:,batch);
    for i=1:numcases
	rho = corr(data(i,:)', stackdata', 'type', 'Pearson');
	[sortvals, sortind] = sort(rho, 'descend');
	corvec = [];
	for j=1:K
	    [batchId, insId] = GetIds(numcases, numbatches, sortind(j));
	    tmp = [batchId, insId, sortvals(j)];
	    corvec = [corvec, tmp];
	end
	batchcor21(i,:,batch) = corvec;
    end
end

% for batchsim11 on batchdata
for batch=1:numbatches
    data = batchdata(:,:,batch);
    [IDX, D] = knnsearch(stackdata, data, 'K', K);
    for i=1:numcases
	corvec = [];
	for j=1:K
	    [batchId, insId] = GetIds(numcases, numbatches, IDX(i,j));
	    tmp = [batchId, insId, D(i,j)];
	    corvec = [corvec, tmp];
	end
	batchsim11(i,:,batch) = corvec;
    end
end

% for batchsim2 on batchdata_aux
for batch=1:numbatches_aux
    data = batchdata_aux(:,:,batch);
    [IDX, D] = knnsearch(stackdata_aux, data, 'K', K);
    for i=1:numcases
	corvec = [];
	for j=1:K
	    [batchId, insId] = GetIds(numcases, numbatches_aux, IDX(i,j));
	    tmp = [batchId, insId, D(i,j)];
	    corvec = [corvec, tmp];
	end
	batchsim2(i,:,batch) = corvec;
    end
end

end

function [batchId, insId] = GetIds(numcases, numbatches, ind) 

batchId = ceil(ind/numcases);
insId = ind - (batchId-1) * numcases;

end
